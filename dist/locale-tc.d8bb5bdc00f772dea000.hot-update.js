exports.id = "locale-tc";
exports.modules = {

/***/ "./locales/tc/l10n-multiclusterProjects-applicationWorkloads-deployments-list.js":
/*!***************************************************************************************!*\
  !*** ./locales/tc/l10n-multiclusterProjects-applicationWorkloads-deployments-list.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * This file is part of KubeSphere Console.\n * Copyright (C) 2019 The KubeSphere Console Authors.\n *\n * KubeSphere Console is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * KubeSphere Console is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with KubeSphere Console.  If not, see <https://www.gnu.org/licenses/>.\n */\nmodule.exports = {\n  // Banner\n  WORKLOAD_DESC: '工作負載 (Workload) 通常是訪問服務的實際載體, 也是對節點紀錄收集、監控等系統應用的實際運行載體，是對一組容器組 (Pod) 的抽象模型。',\n  // List\n  DEPLOYMENT_EMPTY_DESC: 'Please create a Deployment.',\n  UPDATING: 'Updating',\n  // List > Edit Information\n  // List > Edit YAML\n  // List > Delete\n  // List > Create\n  // List > Create > Basic Information\n  NEXT: '下一步',\n  // List > Create > Pod Settings > Replica Scheduling Mode\n  REPLICA_SCHEDULING_MODE: '部署模式',\n  SPECIFY_REPLICAS: 'Specify Replicas',\n  WEIGHTS: 'Weights',\n  SPECIFY_WEIGHTS: 'Specify Weights',\n  SPECIFY_WEIGHTS_DESC: '設定的總副本數將按照設定的權重分配到選擇的集群中，非可用集群的副本會自定遷移到可用集群上。',\n  SPECIFY_REPLICAS_DESC: '明確指定各集群所需部署的副本數。',\n  REPLICA_LOW_SI: '副本',\n  REPLICA_LOW_PL: '副本',\n  WEIGHT: '權重',\n  TOTAL_REPLICAS: '副本總數',\n  // List > Create > Pod Settings > Add Container > Container Settings\n  ADD_CONTAINER: '添加容器',\n  ADD_CONTAINER_DESC: 'Kubesphere 支持從鏡像倉庫拉取鏡像以及通過代碼構建新的鏡像並部署',\n  CONTAINERS: '容器鏡像',\n  IMAGE_TIME_SIZE_LAYER: 'Updated {time}',\n  IMAGE_DESC: '要從私有鏡像倉庫部署。',\n  IMAGE_PLACEHOLDER: '點擊右側圖標可選擇鏡像，或直接輸入名稱 例：nginx:latest',\n  IMAGE_EMPTY: '請設置鏡像',\n  ENTER_POSITIVE_INTEGER_DESC: '副本輸入不合法',\n  TOTAL_REPLICAS_EMPTY_DESC: '請輸入副本總數',\n  CONTAINER_NAME: '容器名稱',\n  CONTAINER_TYPE: '容器類型',\n  USE_DEFAULT_PORTS: '使用預設端口',\n  NO_DEFAULT_PORT: '暫無預設端口配置',\n  REGISTRY: '倉庫',\n  SET_IMAGE_DESC: '請選擇鏡像',\n  WORKER_CONTAINER: '工作容器',\n  CONTAINER_RESOURCE_LIMIT_TIP: '請設置容器的資源限制與資源預留，這將能夠幫助系統更好地調度容器，提高穩定性。您也可在【項目設置】中，通過【基本資訊】->【項目管理】->【編輯資源預設請求】，來統一設置預設值。',\n  GPU_TYPE: 'GPU Type',\n  GPU_LIMIT: 'GPU Limit',\n  NVIDIA_COM_GPU: 'NVIDIA GPU',\n  NO_LIMIT: '不限制',\n  NO_REQUEST: '不預留',\n  NO_RESOURCE_LIMIT: '無資源限制',\n  IGNORE_AND_RETRY: '重試',\n  // List > Create > Pod Settings > Add Container > Port Settings\n  PORT_SETTINGS: '端口設置',\n  ISTIO_PROTOCOL_TIP: 'To fully use the Application Governance feature, select a protocol based on the actual usage of the Service. The port name will be generated in the <Protocol>-<Name> format.',\n  REQUIRED: '必填',\n  // List > Create > Pod Settings > Add Container > Use Local Image First\n  IMAGE_PULL_POLICY_ALWAYS: '嘗試重新下載鏡像（Always）',\n  IMAGE_PULL_POLICY_NEVER: '僅使用本地鏡像（Never）',\n  IMAGE_PULL_POLICY_ALWAYS_DESC: '在創建及更新時，每次都會嘗試下載新的鏡像',\n  IMAGE_PULL_POLICY_IFNOTPRESENT_DESC: '如果本地存在鏡像就優先使用本地鏡像',\n  IMAGE_PULL_POLICY_NEVER_DESC: '僅會使用本地鏡像，如果本地不存在所需鏡像，則會導致容器異常',\n  IMAGE_PULL_POLICY_IFNOTPRESENT: '優先使用本地鏡像（IfNotPresent）',\n  // List > Create > Pod Settings > Add Container > Health Check\n  LIVENESS_CHECK: '容器存活檢查',\n  READINESS_CHECK: '容器就緒檢查',\n  STARTUP_CHECK: '容器啟動檢查',\n  LIVENESS_CHECK_DESC: '該檢查方式用於檢測容器是否活著。',\n  READINESS_CHECK_DESC: '該檢查方式用於檢測容器是否準備好開始處理用戶請求。',\n  STARTUP_CHECK_DESC: '該檢查方式用於檢測容器是否啟動成功。',\n  ADD_PROBE: '添加檢查器',\n  COMMANDS: '命令',\n  HEALTH_CHECK: '健康檢查',\n  STARTUP_CHECK_TIP: '需要 Kubernetes v1.18 或以上版本。',\n  // List > Create > Pod Settings > Add Container > Life Management\n  LIFECYCLE_MANAGEMENT: 'Lifecycle Management',\n  LIFECYCLE_MANAGEMENT_DESC: 'Add actions to be performed after the container is started or before it is stopped for environment preparation or graceful shutdown.',\n  POSTSTART_ACTION: 'Post-start Action',\n  PRESTOP_ACTION: 'Pre-stop Action',\n  POSTSTART_ACTION_DESC: 'Add an action to be performed after the container is started.',\n  PRESTOP_ACTION_DESC: 'Add an action to be performed before the container is stopped.',\n  ADD_ACTION: 'Add Action',\n  // List > Create > Pod Settings > Add Container > Environment Variables\n  ADD_ENVIRONMENT_VARIABLE: '添加環境變量',\n  KEY_IN_RESOURCE: '選擇鍵',\n  LABEL_TYPE: '{label} <span style=\"{style}\">（{type}）</span>',\n  // List > Create > Pod Settings > Add Container > Container Security Context\n  CONTAINER_SECURITY_CONTEXT: '容器 Security Context',\n  CONTAINER_SECURITY_CONTEXT_DESC: 'Security Context的目的是限制不可信容器的行為，保護系統和其他容器不受其影響。',\n  PRIVILEGED_MODE: '特權模式',\n  PRIVILEGED_MODE_DESC: '此時容器中的進程本質上等價於宿主節點上的 root 用戶。',\n  ALLOW_PRIVILEGE_ESCALATION: '允許擴大特權(AllowPrivilegeEscalation)',\n  ALLOW_PRIVILEGE_ESCALATION_DESC: '進程是否可以獲取比父進程更多的特權。當以特權模式運行時，則為允許狀態。',\n  ROOT_DIRECTORY_READONLY: '文件系統root唯讀(ReadOnlyRootFilesystem)',\n  ROOT_DIRECTORY_READONLY_DESC: '該容器的文件系統根路徑是否唯讀。',\n  USER_AND_USER_GROUP: '用戶和用戶組',\n  USER_GROUP: '用戶組',\n  RUN_AS_NON_ROOT: '僅允許非 Root 用戶',\n  RUN_AS_NON_ROOT_DESC: 'Kubernetes 在運行容器之前將執行檢查，以確保容器進程不是以 root 用戶（UID為0）運行，否則將不能啟動容器。',\n  RUN_AS_USER_DESC: '執行容器 entrypoint 進程的 UID。預設為 docker 引擎的 GID',\n  RUN_AS_USER_GROUP_DESC: '執行容器 entrypoint 進程的 GID。預設為 docker 引擎的 GID',\n  SELINUX_CONTEXT: 'SELinux 上下文',\n  CAPABILITIES: 'Capabilities',\n  DROP: '移除',\n  ACCESS_CONTROL: '訪問控制',\n  LEVEL: '等級',\n  // List > Create > Pod Settings > Add Container > Synchronize Host Timezone\n  SYNC_HOST_TIMEZONE_DESC: '時區與主機同步後，容器内的時區將與主機節點一致。',\n  SYNC_HOST_TIMEZONE: '同步宿主機時區',\n  // List > Create > Pod Settings > Update Strategy\n  UPDATE_STRATEGY: '更新策略',\n  ROLLING_UPDATE_RECOMMENDED: '滾動更新(推薦)',\n  SIMULTANEOUS_UPDATE: '替換升級',\n  ROLLINGUPDATE_DESC: '滾動升級將逐步用新版本的實例替換版本的實例，升級的過程中，業務流量會同時負載平衡分布到新舊的實例上，因此業務不會中斷。',\n  SIMULTANEOUS_UPDATE_DESC: '替換升級會先刪除舊的容器組，再創建新容器組；升級過程中業務會中斷。',\n  ENTER_INTEGER_OR_PERCENTAGE: '請輸入值',\n  MAX_EXTRA_EMPTY: 'Please set the maximum number of extra Pod replicas allowed during the update process.',\n  // List > Create > Pod Settings > Pod Security Context\n  POD_SECURITY_CONTEXT: '容器組 Security Context',\n  POD_SECURITY_CONTEXT_DESC: '自定義容器組的訪問控制和權限設置。',\n  POD_SECURITY_CONTEXT_TIP: '容器組 Security Context 可以為容器組内的容器提供預設的用戶和用戶組設置以及 seLinuxOptions 的參數設置，如果容器中已經對這些參數進行了定義，則優先以容器中的設置為準。',\n  // List > Create > Pod Settings > Pod Scheduling Rules\n  POD_SCHEDULING_RULES: '容器组调度策略',\n  POD_SCHEDULING_RULES_DESC: '您可以为容器組調度指定規則',\n  DEFAULT_RULES: 'Default Rules',\n  DEFAULT_RULES_DESC: 'Schedules the Pod replicas to nodes according to default rules.',\n  DECENTRALIZED_SCHEDULING: '容器組分散部署',\n  CUSTOM_RULES: 'Custom Rules',\n  CUSTOM_RULES_DESC: 'Pod replicas are scheduled to nodes according to user-defined rules.',\n  DECENTRALIZED_SCHEDULING_DESC: '容器組副本將會盡量分散在不同的節點中',\n  CENTRALIZED_SCHEDULING_DESC: '容器組副本將會盡量部署在同一節點上',\n  CENTRALIZED_SCHEDULING: '容器組聚合部署',\n  SCHEDULE_WITH_TARGET: '與目標部署到壹起',\n  SCHEDULE_AWAY_FROM_TARGET: '遠離目標部署',\n  MATCH_IF_POSSIBLE: '盡可能滿足',\n  MUST_MATCH: '必須匹配',\n  TARGET: '目標',\n  STRATEGY: '策略',\n  // List > Create > Pod Settings > Add Metadata\n  ADD_METADATA: '添加元數據',\n  POD_ADD_METADATA_DESC: 'Add metadata to the Pod replicas.',\n  // List > Create > Storage Settings\n  STORAGE_SETTINGS: 'Storage Settings',\n  READ_ONLY_LOW: 'read-only',\n  READ_AND_WRITE_LOW: 'read and write',\n  // List > Create > Storage Settings > Mount Volume\n  MOUNT_VOLUME: '添加儲存卷',\n  WORKLOAD_MOUNT_VOLUME_DESC: 'Mount an persistent volume, temporary volume, or HostPath volume to the containers.',\n  SELECT_PERSISITENT_VOLUME_CLAIM: 'Select Persistent Volume Claim',\n  SELECT_PERSISITENT_VOLUME_CLAIM_DESC: 'Mount a persistent volume created according to the persistent volume claim to the containers.',\n  CAPACITY: '容量',\n  PVC_NOT_SELECT: 'Please select a persistent volume claim.',\n  TEMPORARY_VOLUME: '臨時儲存卷',\n  VOLUME_NAME: '儲存卷名稱',\n  VOLUME_NAME_EMPTY: '請輸入儲存卷名稱',\n  HOST_PATH_EMPTY: '請輸入存儲卷主機路徑',\n  CONTAINER_NOT_SELECTED: '請至少選擇一個容器進行掛載',\n  NOT_MOUNT: '不掛載',\n  HOSTPATH_VOLUME: 'HostPath 儲存卷',\n  HOSTPATH_TIP: 'HostPath 將主機的文件系統掛載到Pod中，它使一些應用程式能逃出對其做出的隔離限制，請謹慎使用。',\n  HOST_PATH: '主机路徑',\n  READ_AND_WRITE: '讀寫',\n  READ_ONLY: '只讀',\n  // List > Create > Storage Settings > Mount Configmap or Secret\n  MOUNT_CONFIGMAP_OR_SECRET: '掛載配置文件或密鑰',\n  MOUNT_CONFIGMAP_OR_SECRET_DESC: '將配置文件或密鑰掛載至指定目錄',\n  CONFIGMAP: '配置字典',\n  SELECT_CONFIGMAP_DESC: '將配置中的值添加為卷。',\n  READ_WRITE_MOUNT_EMPTY: '請指定讀寫方式及掛載路徑',\n  SELECT_SPECIFIC_KEYS: '選擇特定的鍵和路徑',\n  SELECT_SPECIFIC_KEYS_DESC: '選擇要使用的密鑰以及將公開每個密鑰的文件路徑，文件路徑相當於裝載路徑，每個文件的内容都是密鑰的值。',\n  SELECT_SECRET_DESC: '將密鑰中的值添加為卷。',\n  CONFIGMAP_NOT_SELECT: '請選擇配置文件',\n  SECRET_NOT_SELECT: '請選擇密鑰',\n  NO_AVAILABLE_RESOURCE: '暫無可用資源',\n  // List > Create > Advanced Settings\n  SELECT_NODES: '設置節點調度策略',\n  SELECT_NODES_DESC: '可以讓容器組副本在指定的節點運行',\n  ADD_NODE_SELECTOR: '添加節點選擇器',\n  ADD_METADATA_DESC: '對資源進行額外的元數據設置，例如 Label 和 Annotation',\n  KEY: '鍵',\n  VALUE: '值',\n  ADVANCED_SETTINGS: '高級設置',\n  // List > Create > Advanced Settings > Specify Node\n  WORKLOAD_SPECIFY_NODE_DESC: '可以讓容器組副本在指定的節點運行',\n  // List > Create > Cluster Differences\n  CLUSTER_DIFF: 'Cluster Differences',\n  CLUSTER_DIFF_CONTAINER_SETTINGS_DESC: '根據不同的需要在不同的集群中設置不同的容器',\n  CLUSTER_DIFF_PORT_SETTINGS_DESC: '可以在不同集群設置不同的服務端口',\n  CLUSTER_DIFF_ENVIRONMENT_VARIABLES_DESC: '可以在不同集群設置不同的環境變量'\n};\n\n//# sourceURL=webpack:///./locales/tc/l10n-multiclusterProjects-applicationWorkloads-deployments-list.js?");

/***/ })

};