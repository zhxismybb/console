exports.id = "locale-zh";
exports.modules = {

/***/ "./locales/zh/l10n-multiclusterProjects-applicationWorkloads-deployments-list.js":
/*!***************************************************************************************!*\
  !*** ./locales/zh/l10n-multiclusterProjects-applicationWorkloads-deployments-list.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * This file is part of KubeSphere Console.\n * Copyright (C) 2019 The KubeSphere Console Authors.\n *\n * KubeSphere Console is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * KubeSphere Console is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with KubeSphere Console.  If not, see <https://www.gnu.org/licenses/>.\n */\nmodule.exports = {\n  // Banner\n  WORKLOAD_DESC: '工作负载（Workload）用于处理业务请求，可包含一个或多个容器组。日志、监控等系统功能也是由工作负载实现的。',\n  // List\n  DEPLOYMENT_EMPTY_DESC: '请创建一个部署。',\n  UPDATING: '更新中',\n  // List > Edit Information\n  // List > Edit YAML\n  // List > Delete\n  // List > Create\n  // List > Create > Basic Information\n  NEXT: '下一步',\n  // List > Create > Pod Settings > Replica Scheduling Mode\n  REPLICA_SCHEDULING_MODE: '副本调度模式',\n  SPECIFY_REPLICAS: '指定副本数量',\n  WEIGHTS: '权重',\n  SPECIFY_WEIGHTS: '指定权重',\n  SPECIFY_WEIGHTS_DESC: '设置容器组副本总数和每个集群的权重。容器组副本将根据权重调度到每个集群。',\n  SPECIFY_REPLICAS_DESC: '手动设置每个集群的容器组副本数。',\n  REPLICA_LOW_SI: '副本',\n  REPLICA_LOW_PL: '副本',\n  WEIGHT: '权重',\n  TOTAL_REPLICAS: '副本总数',\n  // List > Create > Pod Settings > Add Container > Container Settings\n  ADD_CONTAINER: '添加容器',\n  ADD_CONTAINER_DESC: '自定义容器的设置以创建容器。',\n  CONTAINERS: '容器',\n  IMAGE_TIME_SIZE_LAYER: '更新于 {time}',\n  IMAGE_DESC: '如需使用私有镜像服务，您需要先创建镜像服务保密字典。',\n  IMAGE_PLACEHOLDER: '镜像名称或路径，例如 nginx:latest',\n  IMAGE_EMPTY: '请设置镜像。',\n  ENTER_POSITIVE_INTEGER_DESC: '请输入一个正整数。',\n  TOTAL_REPLICAS_EMPTY_DESC: '请输入所有集群容器组副本的总数。',\n  CONTAINER_NAME: '容器名称',\n  CONTAINER_TYPE: '容器类型',\n  USE_DEFAULT_PORTS: '使用默认端口',\n  NO_DEFAULT_PORT: '暂无默认端口配置',\n  REGISTRY: '镜像服务',\n  SET_IMAGE_DESC: '为容器设置镜像。',\n  WORKER_CONTAINER: '工作容器',\n  CONTAINER_RESOURCE_LIMIT_TIP: '设置容器的资源限制与资源预留，以将容器调度到合适的节点上。',\n  GPU_TYPE: 'GPU 类型',\n  GPU_LIMIT: 'GPU 限制',\n  NVIDIA_COM_GPU: '无效的GPU',\n  NO_LIMIT: '不限制',\n  NO_REQUEST: '不预留',\n  NO_RESOURCE_LIMIT: '无资源限制',\n  IGNORE_AND_RETRY: '忽略并重试',\n  // List > Create > Pod Settings > Add Container > Port Settings\n  PORT_SETTINGS: '端口设置',\n  ISTIO_PROTOCOL_TIP: '选择服务实际使用的协议以充分利用应用治理功能。例如，为 HTTP 服务选择 HTTP 协议。',\n  REQUIRED: '必填',\n  // List > Create > Pod Settings > Add Container > Use Local Image First\n  IMAGE_PULL_POLICY_ALWAYS: '每次都拉取镜像',\n  IMAGE_PULL_POLICY_NEVER: '仅使用本地镜像',\n  IMAGE_PULL_POLICY_ALWAYS_DESC: '在容器组创建及更新时，每次都尝试拉取新的镜像。',\n  IMAGE_PULL_POLICY_IFNOTPRESENT_DESC: '如果本地存在所需的镜像，则优先使用本地镜像。',\n  IMAGE_PULL_POLICY_NEVER_DESC: '仅使用本地镜像。如果本地不存在所需的镜像，则会导致容器异常。',\n  IMAGE_PULL_POLICY_IFNOTPRESENT: '优先使用本地镜像',\n  // List > Create > Pod Settings > Add Container > Health Check\n  LIVENESS_CHECK: '存活检查',\n  READINESS_CHECK: '就绪检查',\n  STARTUP_CHECK: '启动检查',\n  LIVENESS_CHECK_DESC: '检查容器是否存活。',\n  READINESS_CHECK_DESC: '检查容器是否可以处理请求。',\n  STARTUP_CHECK_DESC: '检查容器是否启动成功。',\n  ADD_PROBE: '添加探针',\n  COMMANDS: '命令',\n  HEALTH_CHECK: '健康检查',\n  STARTUP_CHECK_TIP: '需要 Kubernetes v1.18 或以上版本。',\n  // List > Create > Pod Settings > Add Container > Life Management\n  LIFECYCLE_MANAGEMENT: '生命周期管理',\n  LIFECYCLE_MANAGEMENT_DESC: '设置容器启动后或终止前需要执行的动作，以进行环境检查或体面终止。',\n  POSTSTART_ACTION: '启动后动作',\n  PRESTOP_ACTION: '终止前动作',\n  POSTSTART_ACTION_DESC: '设置容器启动后需要执行的动作。',\n  PRESTOP_ACTION_DESC: '设置容器终止前需要执行的动作。',\n  ADD_ACTION: '添加动作',\n  // List > Create > Pod Settings > Add Container > Environment Variables\n  ADD_ENVIRONMENT_VARIABLE: '添加环境变量',\n  KEY_IN_RESOURCE: '资源中的键',\n  LABEL_TYPE: '{label} <span style=\"{style}\">（{type}）</span>',\n  // List > Create > Pod Settings > Add Container > Container Security Context\n  CONTAINER_SECURITY_CONTEXT: '容器安全上下文',\n  CONTAINER_SECURITY_CONTEXT_DESC: '自定义容器的权限设置。',\n  PRIVILEGED_MODE: '特权模式',\n  PRIVILEGED_MODE_DESC: '以主机上的 root 用户运行容器进程。',\n  ALLOW_PRIVILEGE_ESCALATION: '允许特权提升',\n  ALLOW_PRIVILEGE_ESCALATION_DESC: '允许容器进程获取比父进程更多的特权。当特权模式启用时，此选项目默认启用。',\n  ROOT_DIRECTORY_READONLY: '根目录只读',\n  ROOT_DIRECTORY_READONLY_DESC: '将容器文件系统的根目录设置为只读。',\n  USER_AND_USER_GROUP: '用户和用户组',\n  USER_GROUP: '用户组',\n  RUN_AS_NON_ROOT: '仅允许非 root 用户运行',\n  RUN_AS_NON_ROOT_DESC: '启动容器之前检查容器是否将以 root 用户运行。如果容器将以 root 用户运行则不启动容器。',\n  RUN_AS_USER_DESC: '执行容器进程入口点的 UID。默认为镜像元数据中指定的 UID。',\n  RUN_AS_USER_GROUP_DESC: '执行容器进程入口点的 GID。默认为容器运行时的默认 GID。',\n  SELINUX_CONTEXT: 'SELinux 上下文',\n  CAPABILITIES: '权能',\n  DROP: '移除',\n  ACCESS_CONTROL: '访问控制',\n  LEVEL: '等级',\n  // List > Create > Pod Settings > Add Container > Synchronize Host Timezone\n  SYNC_HOST_TIMEZONE_DESC: '同步容器与主机的时区。',\n  SYNC_HOST_TIMEZONE: '同步主机时区',\n  // List > Create > Pod Settings > Update Strategy\n  UPDATE_STRATEGY: '更新策略',\n  ROLLING_UPDATE_RECOMMENDED: '滚动更新（推荐）',\n  SIMULTANEOUS_UPDATE: '同时更新',\n  ROLLINGUPDATE_DESC: '用新容器组副本逐步替换旧容器组副本。升级过程中业务流量会负载均衡到新旧容器组副本上，业务不会中断。',\n  SIMULTANEOUS_UPDATE_DESC: '删除全部旧容器组副本再创建新容器组副本。升级过程中业务会中断。',\n  ENTER_INTEGER_OR_PERCENTAGE: '请输入整数或百分比。',\n  MAX_EXTRA_EMPTY: '请设置更新过程中允许的多余容器组副本的最大数量或百分比。',\n  // List > Create > Pod Settings > Pod Security Context\n  POD_SECURITY_CONTEXT: '容器组安全上下文',\n  POD_SECURITY_CONTEXT_DESC: '自定义容器组的权限设置。',\n  POD_SECURITY_CONTEXT_TIP: '如果容器组安全上下文和容器安全上下文中都设置了用户、用户组和 SELinux 上下文，容器安全上下文中的设置将覆盖容器组安全上下文中的设置。',\n  // List > Create > Pod Settings > Pod Scheduling Rules\n  POD_SCHEDULING_RULES: '容器组调度规则',\n  POD_SCHEDULING_RULES_DESC: '设置容器组副本调度到节点的规则。',\n  DEFAULT_RULES: '默认规则',\n  DEFAULT_RULES_DESC: '按照默认的规则将容器组副本调度到节点。',\n  DECENTRALIZED_SCHEDULING: '分散调度',\n  CUSTOM_RULES: '自定义规则',\n  CUSTOM_RULES_DESC: '按照自定义的规则将容器组副本调度到节点。',\n  DECENTRALIZED_SCHEDULING_DESC: '尽可能将容器组副本调度到不同的节点上。',\n  CENTRALIZED_SCHEDULING_DESC: '尽可能将容器组副本调度到同一节点上。',\n  CENTRALIZED_SCHEDULING: '集中调度',\n  SCHEDULE_WITH_TARGET: '与目标调度到一起',\n  SCHEDULE_AWAY_FROM_TARGET: '远离目标调度',\n  MATCH_IF_POSSIBLE: '尽可能匹配',\n  MUST_MATCH: '必须匹配',\n  TARGET: '目标',\n  STRATEGY: '策略',\n  // List > Create > Pod Settings > Add Metadata\n  ADD_METADATA: '添加元数据',\n  POD_ADD_METADATA_DESC: '为容器组副本添加元数据。',\n  // List > Create > Storage Settings\n  STORAGE_SETTINGS: '存储设置',\n  READ_ONLY_LOW: '只读',\n  READ_AND_WRITE_LOW: '读写',\n  // List > Create > Storage Settings > Mount Volume\n  MOUNT_VOLUME: '挂载卷',\n  WORKLOAD_MOUNT_VOLUME_DESC: '为容器挂载持久卷、临时卷或 HostPath 卷。',\n  SELECT_PERSISITENT_VOLUME_CLAIM: '选择持久卷声明',\n  SELECT_PERSISITENT_VOLUME_CLAIM_DESC: '将根据持久卷声明创建的持久卷挂载到容器。',\n  CAPACITY: '容量',\n  PVC_NOT_SELECT: '请选择一个持久卷声明。',\n  TEMPORARY_VOLUME: '临时卷',\n  VOLUME_NAME: '卷名称',\n  VOLUME_NAME_EMPTY: '请为卷设置名称。',\n  HOST_PATH_EMPTY: '请为卷设置主机路径。',\n  CONTAINER_NOT_SELECTED: '请将卷挂载到至少一个容器。',\n  NOT_MOUNT: '不挂载',\n  HOSTPATH_VOLUME: 'HostPath 卷',\n  HOSTPATH_TIP: '使用 HostPath 卷将主机文件系统中的文件或目录挂载到容器中。',\n  HOST_PATH: '主机路径',\n  READ_AND_WRITE: '读写',\n  READ_ONLY: '只读',\n  // List > Create > Storage Settings > Mount Configmap or Secret\n  MOUNT_CONFIGMAP_OR_SECRET: '挂载配置字典或保密字典',\n  MOUNT_CONFIGMAP_OR_SECRET_DESC: '为容器挂载配置字典或保密字典。',\n  CONFIGMAP: '配置字典',\n  SELECT_CONFIGMAP_DESC: '将配置字典挂载到容器。',\n  READ_WRITE_MOUNT_EMPTY: '请指定读写方式及挂载路径。',\n  SELECT_SPECIFIC_KEYS: '选择特定键',\n  SELECT_SPECIFIC_KEYS_DESC: '选择需要挂载到容器的特定键。',\n  SELECT_SECRET_DESC: '将保密字典挂载到容器。',\n  CONFIGMAP_NOT_SELECT: '请选择配置字典。',\n  SECRET_NOT_SELECT: '请选择保密字典。',\n  NO_AVAILABLE_RESOURCE: '未发现可用资源',\n  // List > Create > Advanced Settings\n  SELECT_NODES: '选择节点',\n  SELECT_NODES_DESC: '将容器组副本分配给特定的节点。您可以使用标签选择节点或手动指定节点。',\n  ADD_NODE_SELECTOR: '添加节点选择器',\n  ADD_METADATA_DESC: '为资源添加元数据。',\n  KEY: '键',\n  VALUE: '值',\n  ADVANCED_SETTINGS: '高级设置',\n  // List > Create > Advanced Settings > Specify Node\n  WORKLOAD_SPECIFY_NODE_DESC: '将容器副本分配给特定节点。',\n  // List > Create > Cluster Differences\n  CLUSTER_DIFF: '集群差异设置',\n  CLUSTER_DIFF_CONTAINER_SETTINGS_DESC: '在不同的集群中使用不同的容器设置。',\n  CLUSTER_DIFF_PORT_SETTINGS_DESC: '为不同集群中的容器设置不同的端口。',\n  CLUSTER_DIFF_ENVIRONMENT_VARIABLES_DESC: '为不同集群中的容器设置不同的环境变量。'\n};\n\n//# sourceURL=webpack:///./locales/zh/l10n-multiclusterProjects-applicationWorkloads-deployments-list.js?");

/***/ })

};